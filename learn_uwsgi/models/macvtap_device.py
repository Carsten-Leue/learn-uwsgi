# coding: utf-8

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from ..serialization import deserialize_model


class MacvtapDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, mac_address=None, source=None):  # noqa: E501
        """MacvtapDevice - a model defined in OpenAPI

        :param type: The type of this MacvtapDevice.  # noqa: E501
        :type type: str
        :param mac_address: The mac_address of this MacvtapDevice.  # noqa: E501
        :type mac_address: str
        :param source: The source of this MacvtapDevice.  # noqa: E501
        :type source: str
        """
        self.openapi_types = {
            'type': str,
            'mac_address': str,
            'source': str
        }

        self.attribute_map = {
            'type': 'type',
            'mac_address': 'macAddress',
            'source': 'source'
        }

        self._type = type
        self._mac_address = mac_address
        self._source = source

    @classmethod
    def from_dict(cls, dikt) -> 'MacvtapDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MacvtapDevice of this MacvtapDevice.  # noqa: E501
        :rtype: MacvtapDevice
        """
        return deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this MacvtapDevice.


        :return: The type of this MacvtapDevice.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MacvtapDevice.


        :param type: The type of this MacvtapDevice.
        :type type: str
        """
        allowed_values = ["macvtap"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def mac_address(self):
        """Gets the mac_address of this MacvtapDevice.


        :return: The mac_address of this MacvtapDevice.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this MacvtapDevice.


        :param mac_address: The mac_address of this MacvtapDevice.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def source(self):
        """Gets the source of this MacvtapDevice.


        :return: The source of this MacvtapDevice.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this MacvtapDevice.


        :param source: The source of this MacvtapDevice.
        :type source: str
        """

        self._source = source
